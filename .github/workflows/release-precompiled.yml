name: build-precompiled-nifs

on:
  # Build artifacts when a GitHub Release is published
  release:
    types: [published]
  # Manual trigger for re-runs or dry runs
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach assets (e.g., v0.4.2)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease (when manually dispatched)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  # Tag to attach assets to, from release event or manual input
  TAG_NAME: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag_name }}
  # Determine prerelease flag: from release tag name, or manual input
  IS_PRERELEASE: ${{ github.event_name == 'release' && contains(github.event.release.tag_name, '-') || inputs.prerelease }}

concurrency:
  group: release-${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag_name || github.ref }}
  cancel-in-progress: true

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: x86_64-unknown-linux-gnu
      NIF_VERSION: ${{ matrix.nif }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install build deps
        run: sudo apt-get update && sudo apt-get install -y pkg-config zstd
      - name: Build NIF
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${TAG_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}.so.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  linux-aarch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-unknown-linux-gnu
      NIF_VERSION: ${{ matrix.nif }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install cross toolchain
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config zstd
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          # Belt-and-suspenders: tell cargo/rustc the exact linker and archiver
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
      - name: Build NIF
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${TAG_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}.so.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256



  macos-aarch64:
    runs-on: macos-14
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-apple-darwin
      NIF_VERSION: ${{ matrix.nif }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Build NIF
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${TAG_NAME#v}
          # macOS lib extension is .dylib but the artifact name keeps .so to match RustlerPrecompiled expectations
          LIB=libmarkdown_ld_nif.dylib
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}.so.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          shasum -a 256 "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256



  linux-x86_64-ssi:
    if: false # temporarily disabled (ssi variant)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: x86_64-unknown-linux-gnu
      NIF_VERSION: ${{ matrix.nif }}
      FEATURES: ssi_urdna2015
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install build deps
        run: sudo apt-get update && sudo apt-get install -y pkg-config zstd
      - name: Build NIF with features
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET --features $FEATURES
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}-features-${FEATURES}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  linux-aarch64-ssi:
    if: false # temporarily disabled (ssi variant)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-unknown-linux-gnu
      NIF_VERSION: ${{ matrix.nif }}
      FEATURES: ssi_urdna2015
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install cross toolchain
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config zstd
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - name: Build NIF with features
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET --features $FEATURES
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}-features-${FEATURES}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256



  macos-aarch64-ssi:
    if: false # temporarily disabled (ssi variant)
    runs-on: macos-14
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-apple-darwin
      NIF_VERSION: ${{ matrix.nif }}
      FEATURES: ssi_urdna2015
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Build NIF with features
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET --features $FEATURES
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          # macOS lib extension is .dylib but the artifact name keeps .so to match RustlerPrecompiled expectations
          LIB=libmarkdown_ld_nif.dylib
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}-features-${FEATURES}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV

  linux-x86_64-musl:
    if: false # temporarily disabled (musl)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: x86_64-unknown-linux-musl
      NIF_VERSION: ${{ matrix.nif }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config zstd
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          zig-version: 0.12.0
      - name: Configure Zig CC/AR for musl
        run: |
          echo "CC_x86_64_unknown_linux_musl=zig cc -target x86_64-linux-musl" >> $GITHUB_ENV
          echo "AR_x86_64_unknown_linux_musl=zig ar" >> $GITHUB_ENV
      - name: Build NIF (musl)
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  linux-x86_64-musl-ssi:
    if: false # temporarily disabled (musl + ssi)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: x86_64-unknown-linux-musl
      NIF_VERSION: ${{ matrix.nif }}
      FEATURES: ssi_urdna2015
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config zstd
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          zig-version: 0.12.0
      - name: Configure Zig CC/AR for musl
        run: |
          echo "CC_x86_64_unknown_linux_musl=zig cc -target x86_64-linux-musl" >> $GITHUB_ENV
          echo "AR_x86_64_unknown_linux_musl=zig ar" >> $GITHUB_ENV
      - name: Build NIF (musl + features)
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET --features $FEATURES
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}-features-${FEATURES}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  linux-aarch64-musl:
    if: false # temporarily disabled (musl)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-unknown-linux-musl
      NIF_VERSION: ${{ matrix.nif }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install musl toolchain (cross)
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config zstd
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          zig-version: 0.12.0
      - name: Configure Zig CC/AR for musl aarch64
        run: |
          echo "CC_aarch64_unknown_linux_musl=zig cc -target aarch64-linux-musl" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=zig ar" >> $GITHUB_ENV
      - name: Build NIF (musl aarch64)
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
          prerelease: ${{ env.IS_PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  linux-aarch64-musl-ssi:
    if: false # temporarily disabled (musl + ssi)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nif: ["2.16", "2.15", "2.14"]
    env:
      TARGET: aarch64-unknown-linux-musl
      NIF_VERSION: ${{ matrix.nif }}
      FEATURES: ssi_urdna2015
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
      - name: Install musl toolchain (cross)
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config zstd
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          zig-version: 0.12.0
      - name: Configure Zig CC/AR for musl aarch64
        run: |
          echo "CC_aarch64_unknown_linux_musl=zig cc -target aarch64-linux-musl" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=zig ar" >> $GITHUB_ENV
      - name: Build NIF (musl aarch64 + features)
        run: |
          cd native/markdown_ld_nif
          cargo build --release --target $TARGET --features $FEATURES
      - name: Package artifact (tar.gz)
        run: |
          set -euxo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          LIB=libmarkdown_ld_nif.so
          SRC=native/markdown_ld_nif/target/${TARGET}/release/${LIB}
          OUT=libmarkdown_ld_nif-v${VERSION}-nif-${NIF_VERSION}-${TARGET}-features-${FEATURES}.tar.gz
          tar -C "$(dirname "$SRC")" -czf "$OUT" "$(basename "$SRC")"
          echo "ARTIFACT=$OUT" >> $GITHUB_ENV
      - name: SHA256
        run: |
          sha256sum "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
      - name: SHA256
        run: |
          shasum -a 256 "$ARTIFACT" | awk '{print $1 "  " $2}' > "$ARTIFACT.sha256"
      - name: Upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.ARTIFACT }}
            ${{ env.ARTIFACT }}.sha256

  aggregate-checksums:
    runs-on: ubuntu-latest
    needs:
      - linux-x86_64
      - linux-aarch64
      - macos-aarch64
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Aggregate checksums
        run: |
          find artifacts -type f -name '*.sha256' -exec cat {} + > checksums.txt
          ls -l checksums.txt
      - name: Upload aggregate checksums
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: checksums.txt
          prerelease: ${{ env.IS_PRERELEASE }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
